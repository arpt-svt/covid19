{"version":3,"sources":["home/Home.js","serviceWorker.js","index.js"],"names":["addCommas","nStr","x","split","x1","x2","length","rgx","test","replace","columns","CategoricalColumn","title","mapDataToValue","data","Country","NumericalColumn","TotalConfirmed","TotalRecovered","TotalDeaths","Home","useState","countriesData","setcountriesData","indiaCases","setIndiaCases","lastUpdated","setLastUpdated","worldCases","setWorldCases","error","setError","useStyletron","css","extraMarginContent","marginTop","marginBottom","smallMargin","useEffect","countries","fetch","then","res","json","result","console","log","ws","NewConfirmed","NewRecovered","NewDeaths","Countries","country","Slug","push","id","lu","timeago","Date","indiaDisplay","worldDisplay","tableDisplay","className","justifyContent","display","size","width","margin","color","role","aria-label","height","rows","$align","ALIGN","center","src","style","paddingLeft","textDecoration","href","target","Boolean","window","location","hostname","match","engine","Styletron","ReactDOM","render","StrictMode","value","theme","LightTheme","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"iVAiCA,SAASA,EAAUC,GAMjB,IAJA,IAAIC,GADJD,GAAQ,IACKE,MAAM,KACfC,EAAKF,EAAE,GACPG,EAAKH,EAAEI,OAAS,EAAI,IAAMJ,EAAE,GAAK,GACjCK,EAAM,eACHA,EAAIC,KAAKJ,IACdA,EAAKA,EAAGK,QAAQF,EAAK,SAEvB,OAAOH,EAAKC,EAGd,IAAMK,EAAU,CACdC,YAAkB,CAChBC,MAAO,UACPC,eAAgB,SAACC,GAAD,OAAUA,EAAKC,WAEjCC,YAAgB,CACdJ,MAAO,YACPC,eAAgB,SAACC,GAAD,OAAUA,EAAKG,kBAEjCD,YAAgB,CACdJ,MAAO,YACPC,eAAgB,SAACC,GAAD,OAAUA,EAAKI,kBAEjCF,YAAgB,CACdJ,MAAO,WACPC,eAAgB,SAACC,GAAD,OAAUA,EAAKK,gBAyKpBC,MApKf,WAAiB,IAAD,EAC4BC,mBAAS,IADrC,mBACPC,EADO,KACQC,EADR,OAEsBF,mBAAS,IAF/B,mBAEPG,EAFO,KAEKC,EAFL,OAGwBJ,mBAAS,IAHjC,mBAGPK,EAHO,KAGMC,EAHN,OAIsBN,mBAAS,IAJ/B,mBAIPO,EAJO,KAIKC,EAJL,OAKYR,oBAAS,GALrB,mBAKPS,EALO,KAKAC,EALA,OAMAC,cAAPC,EANO,oBAQRC,EAAoBD,EAAI,CAACE,UAAW,OAAQC,aAAc,SAC1DC,EAAcJ,EAAI,CAAEE,UAAW,QAGrCG,qBAAU,WAER,IAAIC,EAAY,GAEhBC,MAAM,sCACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACCC,QAAQC,IAAIF,GACZ,IAFU,EAENG,EAAK,CACP9B,eAAgB,EAChB+B,aAAc,EACd9B,eAAgB,EAChB+B,aAAc,EACd9B,YAAa,EACb+B,UAAW,GARH,cAUUN,EAAOO,WAVjB,IAUV,2BAAsC,CAAC,IAA9BC,EAA6B,QACZ,KAApBA,EAAQrC,UACS,UAAjBqC,EAAQC,MACV5B,EAAc2B,GAGhBL,EAAG9B,gBAAkBmC,EAAQnC,eAC7B8B,EAAG7B,gBAAkBkC,EAAQlC,eAC7B6B,EAAG5B,aAAeiC,EAAQlC,eAC1B6B,EAAGC,cAAgBI,EAAQJ,aAC3BD,EAAGE,cAAgBG,EAAQH,aAC3BF,EAAGG,WAAaE,EAAQF,UAExBX,EAAUe,KAAK,CACbC,GAAIH,EAAQC,KACZvC,KAAMsC,MAzBA,8BA4BV,IAAII,EAAKC,IAAeb,EAAOc,MAC/B/B,EAAe6B,GACf3B,EAAckB,GACdxB,EAAiBgB,MAKnB,SAACT,GACCC,GAAS,QAGd,IAEH,IAAI4B,EAAe,GACfC,EAAe,GACfC,EACJ,yBAAKC,UAAW7B,EAAI,CAAE8B,eAAgB,SAAUC,QAAS,OAAQ7B,UAAW,UAC1E,kBAAC,IAAD,CAAS8B,KAAK,WA8DhB,OA5DIrC,EAAWX,iBACb2C,EACE,yBAAKE,UAAW7B,EAAI,CAAEiC,MAAO,OAAQC,OAAQ,UAC3C,kBAAC,IAAD,CAAQC,MAAM,QAAQN,UAAWzB,GAAjC,sBAAkEX,GAClE,kBAAC,IAAD,CAAQoC,UAAW5B,GAAoB,0BAAMmC,KAAK,MAAMC,aAAW,SAA5B,gBAAvC,SACA,yBAAKR,UAAW7B,EAAI,CAAE8B,eAAgB,gBAAiBC,QAAS,UAC9D,6BACE,kBAAC,IAAD,CAAQI,MAAM,MAAMN,UAAWzB,GAA/B,aACA,kBAAC,IAAD,CAAQ+B,MAAM,MAAMN,UAAWzB,GAAcrC,EAAU4B,EAAWX,iBAClE,kBAAC,IAAD,CAAQmD,MAAM,MAAMN,UAAWzB,GAA/B,IAA8CT,EAAWoB,cAAgB,IAAKhD,EAAU4B,EAAWoB,cAAnG,MAEF,6BACE,kBAAC,IAAD,CAAQoB,MAAM,QAAQN,UAAWzB,GAAjC,aACA,kBAAC,IAAD,CAAQ+B,MAAM,QAAQN,UAAWzB,GAAcT,EAAWV,gBAC1D,kBAAC,IAAD,CAAQkD,MAAM,QAAQN,UAAWzB,GAAjC,IAAgDT,EAAWqB,cAAgB,IAAKjD,EAAU4B,EAAWqB,cAArG,MAEF,6BACE,kBAAC,IAAD,CAAQmB,MAAM,OAAON,UAAWzB,GAAhC,YACA,kBAAC,IAAD,CAAQ+B,MAAM,OAAON,UAAWzB,GAAcrC,EAAU4B,EAAWT,cACnE,kBAAC,IAAD,CAAQiD,MAAM,OAAON,UAAWzB,GAAhC,IAA+CT,EAAWsB,WAAa,IAAKlD,EAAU4B,EAAWsB,WAAjG,SAON1B,EAAWP,iBACb4B,QAAQC,IAAItB,GACZmC,EACE,yBAAKG,UAAW7B,EAAI,CAAEiC,MAAO,OAAQC,OAAQ,UAC3C,kBAAC,IAAD,CAAQL,UAAW5B,GAAoB,0BAAMmC,KAAK,MAAMC,aAAW,QAA5B,4BAAvC,SACA,yBAAKR,UAAW7B,EAAI,CAAE8B,eAAgB,gBAAiBC,QAAS,UAC9D,6BACE,kBAAC,IAAD,CAAQI,MAAM,MAAMN,UAAWzB,GAA/B,aACA,kBAAC,IAAD,CAAQ+B,MAAM,MAAMN,UAAWzB,GAAcrC,EAAUwB,EAAWP,iBAClE,kBAAC,IAAD,CAAQmD,MAAM,MAAMN,UAAWzB,GAA/B,IAA8Cb,EAAWwB,cAAgB,IAAKhD,EAAUwB,EAAWwB,cAAnG,MAEF,6BACE,kBAAC,IAAD,CAAQoB,MAAM,QAAQN,UAAWzB,GAAjC,aACA,kBAAC,IAAD,CAAQ+B,MAAM,QAAQN,UAAWzB,GAAcrC,EAAUwB,EAAWN,iBACpE,kBAAC,IAAD,CAAQkD,MAAM,QAAQN,UAAWzB,GAAjC,IAAgDb,EAAWyB,cAAgB,IAAKjD,EAAUwB,EAAWyB,cAArG,MAEF,6BACE,kBAAC,IAAD,CAAQmB,MAAM,OAAON,UAAWzB,GAAhC,YACA,kBAAC,IAAD,CAAQ+B,MAAM,OAAON,UAAWzB,GAAcrC,EAAUwB,EAAWL,cACnE,kBAAC,IAAD,CAAQiD,MAAM,OAAON,UAAWzB,GAAhC,IAA+Cb,EAAW0B,WAAa,IAAKlD,EAAUwB,EAAW0B,WAAjG,OAGJ,kBAAC,IAAD,CAAQY,UAAW5B,GAAnB,mBAKFZ,EAAchB,OAAS,IACzBuD,EACE,yBAAKC,UAAW7B,EAAI,CAAEsC,OAAQ,UAC9B,kBAAC,IAAD,CAA4B7D,QAASA,EAAS8D,KAAMlD,MAKtD,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAsBmD,OAAQC,IAAMC,QACpC,kBAAC,IAAD,KACA,yBAAKC,IAAI,gDAAgDL,OAAO,OAAOL,MAAM,UAE3E,kBAAC,IAAD,CAAsBW,MAAO,CAACC,YAAa,SAC3C,kBAAC,IAAD,CACAhB,UAAW7B,EAAI,CAAC8C,eAAgB,SAC/BC,KAAK,KAFN,qBAKF,kBAAC,IAAD,QAMDpB,EAEAD,EAEAE,EAEA/B,GAAU,kBAAC,IAAD,CAAQgC,UAAWzB,GAAnB,0CAEX,yBAAKyB,UAAW7B,EAAI,CAAE8B,eAAgB,SAAUC,QAAS,OAAQ7B,UAAW,OAAQC,aAAc,UAAlG,iBAEE,kBAAC,IAAD,CAAY4C,KAAK,qBAAqBC,OAAO,SAASb,MAAM,QAA5D,cCjNYc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qCCRAC,EAAS,IAAIC,IAGnBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAmBC,MAAOL,GACxB,kBAAC,IAAD,CAAcM,MAAOC,KACnB,kBAAC,EAAD,SAKNC,SAASC,eAAe,SD6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1D,MAAK,SAAA2D,GACJA,EAAaC,gBAEdC,OAAM,SAAAxE,GACLe,QAAQf,MAAMA,EAAMyE,c","file":"static/js/main.821129ae.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Spinner } from \"baseui/spinner\";\nimport * as timeago from 'timeago.js';\n\n\n\nimport {\n  HeaderNavigation,\n  ALIGN,\n  StyledNavigationList,\n  StyledNavigationItem\n} from \"baseui/header-navigation\";\n\nimport {\n  Label1,\n  Label2,\n  Label4,\n} from 'baseui/typography';\n\nimport {\n  Unstable_StatefulDataTable,\n  CategoricalColumn,\n  NumericalColumn,\n} from 'baseui/data-table';\n\nimport { StyledLink } from \"baseui/link\";\n\n\nimport { useStyletron } from 'baseui';\n\nimport './Home.css';\n\n\nfunction addCommas(nStr) {\n  nStr += '';\n  let x = nStr.split('.');\n  let x1 = x[0];\n  let x2 = x.length > 1 ? '.' + x[1] : '';\n  let rgx = /(\\d+)(\\d{3})/;\n  while (rgx.test(x1)) {\n    x1 = x1.replace(rgx, '$1' + ',' + '$2');\n  }\n  return x1 + x2;\n}\n\nconst columns = [\n  CategoricalColumn({\n    title: 'Country',\n    mapDataToValue: (data) => data.Country,\n  }),\n  NumericalColumn({\n    title: 'Confirmed',\n    mapDataToValue: (data) => data.TotalConfirmed,\n  }),\n  NumericalColumn({\n    title: 'Recovered',\n    mapDataToValue: (data) => data.TotalRecovered,\n  }),\n  NumericalColumn({\n    title: 'Deceased',\n    mapDataToValue: (data) => data.TotalDeaths,\n  })\n]\n\n\nfunction Home() {\n  const [countriesData, setcountriesData] = useState([]);\n  const [indiaCases, setIndiaCases] = useState({});\n  const [lastUpdated, setLastUpdated] = useState('')\n  const [worldCases, setWorldCases] = useState({})\n  const [error, setError] = useState(false);\n  const [css] = useStyletron();\n\n  const extraMarginContent =css({marginTop: '25px', marginBottom: '10px'})\n  const smallMargin = css({ marginTop: '6px' })\n\n\n  useEffect(() => {\n    // Update the document title using the browser API\n    let countries = []\n\n    fetch(\"https://api.covid19api.com/summary\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          console.log(result)\n          let ws = {\n            TotalConfirmed: 0,\n            NewConfirmed: 0,\n            TotalRecovered: 0,\n            NewRecovered: 0,\n            TotalDeaths: 0,\n            NewDeaths: 0\n          }\n          for (let country of result.Countries) {\n            if (country.Country === '') continue\n            if (country.Slug === 'india'){\n              setIndiaCases(country)\n            }\n\n            ws.TotalConfirmed += country.TotalConfirmed\n            ws.TotalRecovered += country.TotalRecovered\n            ws.TotalDeaths += country.TotalRecovered\n            ws.NewConfirmed += country.NewConfirmed\n            ws.NewRecovered += country.NewRecovered\n            ws.NewDeaths += country.NewDeaths\n\n            countries.push({\n              id: country.Slug,\n              data: country\n            })\n          }\n          let lu = timeago.format(result.Date)\n          setLastUpdated(lu)\n          setWorldCases(ws)\n          setcountriesData(countries)\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          setError(true)\n        }\n      )\n  }, []);\n\n  let indiaDisplay = '';\n  let worldDisplay = ''\n  let tableDisplay = (\n  <div className={css({ justifyContent: 'center', display: 'flex', marginTop: '30vh'})}>\n    <Spinner size=\"100px\"/></div>);\n\n  if (worldCases.TotalConfirmed){\n    worldDisplay = (\n      <div className={css({ width: '95vw', margin: 'auto' })}>\n        <Label4 color='green' className={smallMargin}>Last Updated about {lastUpdated}</Label4>\n        <Label1 className={extraMarginContent}><span role=\"img\" aria-label=\"Globe\">ðŸŒŽ</span>World</Label1>\n        <div className={css({ justifyContent: 'space-between', display: 'flex' })}>\n          <div>\n            <Label2 color='red' className={smallMargin}>Confirmed</Label2>\n            <Label2 color='red' className={smallMargin}>{addCommas(worldCases.TotalConfirmed)}</Label2>\n            <Label4 color='red' className={smallMargin}>[{worldCases.NewConfirmed && '+'}{addCommas(worldCases.NewConfirmed)}]</Label4>\n          </div>\n          <div >\n            <Label2 color='green' className={smallMargin}>Recovered</Label2>\n            <Label2 color='green' className={smallMargin}>{worldCases.TotalRecovered}</Label2>\n            <Label4 color='green' className={smallMargin}>[{worldCases.NewRecovered && '+'}{addCommas(worldCases.NewRecovered)}]</Label4>\n          </div>\n          <div>\n            <Label2 color='gray' className={smallMargin}>Deceased</Label2>\n            <Label2 color='gray' className={smallMargin}>{addCommas(worldCases.TotalDeaths)}</Label2>\n            <Label4 color='gray' className={smallMargin}>[{worldCases.NewDeaths && '+'}{addCommas(worldCases.NewDeaths)}]</Label4>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  if (indiaCases.TotalConfirmed){\n    console.log(indiaCases)\n    indiaDisplay = (\n      <div className={css({ width: '95vw', margin: 'auto' })}>\n        <Label1 className={extraMarginContent}><span role=\"img\" aria-label=\"flag\">ðŸ‡®ðŸ‡³</span>India</Label1>\n        <div className={css({ justifyContent: 'space-between', display: 'flex' })}>\n          <div>\n            <Label2 color='red' className={smallMargin}>Confirmed</Label2>\n            <Label2 color='red' className={smallMargin}>{addCommas(indiaCases.TotalConfirmed)}</Label2>\n            <Label4 color='red' className={smallMargin}>[{indiaCases.NewConfirmed && '+'}{addCommas(indiaCases.NewConfirmed)}]</Label4>\n          </div>\n          <div >\n            <Label2 color='green' className={smallMargin}>Recovered</Label2>\n            <Label2 color='green' className={smallMargin}>{addCommas(indiaCases.TotalRecovered)}</Label2>\n            <Label4 color='green' className={smallMargin}>[{indiaCases.NewRecovered && '+'}{addCommas(indiaCases.NewRecovered)}]</Label4>\n          </div>\n          <div>\n            <Label2 color='gray' className={smallMargin}>Deceased</Label2>\n            <Label2 color='gray' className={smallMargin}>{addCommas(indiaCases.TotalDeaths)}</Label2>\n            <Label4 color='gray' className={smallMargin}>[{indiaCases.NewDeaths && '+'}{addCommas(indiaCases.NewDeaths)}]</Label4>\n          </div>\n        </div>\n        <Label1 className={extraMarginContent}>All Countries</Label1>\n      </div>\n    )\n  }\n\n  if (countriesData.length > 0) {\n    tableDisplay = (\n      <div className={css({ height: '85vh' })}>\n      <Unstable_StatefulDataTable columns={columns} rows={countriesData} />\n    </div>)\n  }\n\n  return (\n    <div>\n      <HeaderNavigation>\n        <StyledNavigationList $align={ALIGN.center}>\n        <StyledNavigationItem>\n        <img src=\"http://netmusk.com/images/Favicon/favicon.png\" height=\"32px\" width=\"32px\"/>\n          </StyledNavigationItem>\n          <StyledNavigationItem style={{paddingLeft: '10px'}}>\n          <StyledLink\n          className={css({textDecoration: 'None'})}\n           href=\"/\">\n             COVID-19 TRACKER</StyledLink></StyledNavigationItem>\n       \n        <StyledNavigationItem>\n          \n        </StyledNavigationItem>\n        </StyledNavigationList>\n      </HeaderNavigation>\n\n      {worldDisplay}\n\n      {indiaDisplay}\n\n      {tableDisplay}\n\n      {error &&  <Label2 className={smallMargin}>Something went wrong. Please try again</Label2>}\n\n      <div className={css({ justifyContent: 'center', display: 'flex', marginTop: '20px', marginBottom: '20px'})}>\n        Powered by&nbsp;\n        <StyledLink href=\"http://netmusk.com\" target=\"_blank\" color=\"blue\"\n        >NetMusk</StyledLink>\n      </div>\n\n    </div>\n  );\n}\n\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from './home/Home';\nimport * as serviceWorker from './serviceWorker';\nimport { Client as Styletron } from 'styletron-engine-atomic';\nimport { Provider as StyletronProvider } from 'styletron-react';\nimport { LightTheme, BaseProvider } from 'baseui';\n\n\nconst engine = new Styletron();\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <StyletronProvider value={engine}>\n      <BaseProvider theme={LightTheme}>\n        <Home />\n      </BaseProvider>\n    </StyletronProvider>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}